{"ast":null,"code":"var _jsxFileName = \"E:\\\\cuvette-quizz-app\\\\cuvette-frontend-quiz-app\\\\src\\\\QuizInterface\\\\QuizeQandAns\\\\QuizQandAnsText\\\\QuizText.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport styles from '../QuizQandAnsText/Style.module.css';\nimport { useParams } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuizText = () => {\n  _s();\n  const [quizData, setQuizData] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [timer, setTimer] = useState(0);\n  const [displayType, setDisplayType] = useState('text');\n  const [error, setError] = useState('');\n  const {\n    id\n  } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [displayTypes, setDisplayTypes] = useState(['text', 'imageURL', 'textandimageURL']);\n  const [selectedOption, setSelectedOption] = useState(null);\n  // const [correctCount, setCorrectCount] = useState(0);\n  // const [incorrectCount, setIncorrectCount] = useState(0);\n\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [answeredQuestions, setAnsweredQuestions] = useState([]);\n  const [totalAttemptedQuestions, setTotalAttemptedQuestions] = useState(0);\n  const [attemptedQuestions, setAttemptedQuestions] = useState([]);\n  const navigate = useNavigate();\n  const [showFinalTotal, setShowFinalTotal] = useState(0);\n\n  // Total questions attempted\n  const [textQuestionAttempted, setTextQuestionAttempted] = useState('');\n  const [imageQuestionAttempted, setImageQuestionAttempted] = useState('');\n  const [textAndImageQuestionAttempted, setTextAndImageQuestionAttempted] = useState('');\n\n  // Text quiz correct and Incorrect Question\n  const [textCorrectAns, setTextCorrectAns] = useState(0);\n  const [textInCorrectAns, setTextInCorrectAns] = useState(0);\n\n  // Img quiz correct and Incorrect Question\n  const [imgCorrectAns, setImgCorrectAns] = useState(0);\n  const [imgInCorrectAns, setImgInCorrectAns] = useState(0);\n\n  // TextandImg quiz correct and Incorrect Question\n  const [textImgCorrectAns, setTextImgCorrectAns] = useState(0);\n  const [textImgInCorrectAns, setTextImgInCorrectAns] = useState(0);\n  useEffect(() => {\n    console.log(\"TEXTCorrectCount\", textCorrectAns);\n    console.log(\"TEXTInCorrectCount\", textInCorrectAns);\n    console.log(\"IMGCorrectCount\", imgCorrectAns);\n    console.log(\"IMGInCorrectCount\", imgInCorrectAns);\n    console.log(\"TEXTIMGCorrectCount\", textImgCorrectAns);\n    console.log(\"TEXTIMGInCorrectCount\", textImgInCorrectAns);\n  }, [textQuestionAttempted, imageQuestionAttempted, imageQuestionAttempted, textCorrectAns, textInCorrectAns, imgCorrectAns, imgInCorrectAns, textImgCorrectAns, textImgInCorrectAns, showFinalTotal]);\n  useEffect(() => {\n    const fetchQuizData = async () => {\n      try {\n        debugger;\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/create/quiz/${id}`);\n        console.log('API Response:', response.data);\n        setQuizData(response.data);\n        setLoading(false);\n        setSelectedOptions(new Array(response.data.length).fill(false));\n        setAnsweredQuestions([]);\n        setTotalAttemptedQuestions(0);\n      } catch (error) {\n        console.error('Error fetching quiz data:', error);\n        setError('Error fetching quiz data');\n        setLoading(false);\n      }\n    };\n    fetchQuizData();\n  }, [id]);\n  useEffect(() => {\n    let intervalId;\n\n    // Start the timer when the component mounts\n    if (quizData.timeText > 0) {\n      debugger;\n      setTimer(quizData.timeText);\n      intervalId = setInterval(() => {\n        debugger;\n        setTimer(prevTimer => prevTimer - 1);\n      }, 1000);\n    }\n\n    // Clear the interval when the component unmounts\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [quizData]);\n  useEffect(() => {\n    // Handle logic when the timer reaches 0\n    if (timer === 0) {\n      debugger;\n      // Implement your logic when time's up\n      console.log(\"Time's up!\");\n      // You might want to disable the Next button or do something else here\n    }\n  }, [timer]);\n  const handleOptionClick = selectedOption => {\n    debugger;\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[currentIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // Add the current question to the list of answered questions\n    if (!answeredQuestions.includes(currentIndex)) {\n      setAnsweredQuestions([...answeredQuestions, currentIndex]);\n      setTotalAttemptedQuestions(totalAttemptedQuestions + 1);\n    }\n    switch (displayType) {\n      case 'text':\n        setTextQuestionAttempted(selectedOption);\n        console.log(\"INside optionclick textQuestionAttempted\", textQuestionAttempted);\n        if (selectedOption === quizData.correctOptionText) {\n          console.log('Correct Answer!');\n          setTextCorrectAns(textCorrectAns + 1);\n        } else {\n          console.log('Incorrect Answer!');\n          setTextInCorrectAns(textInCorrectAns + 1);\n        }\n        break;\n      case 'imageURL':\n        setImageQuestionAttempted(selectedOption);\n        console.log(\"INside optionclick imageQuestionAttempted\", imageQuestionAttempted);\n        if (selectedOption === quizData.correctOptionImg) {\n          console.log('Correct Answer!');\n          setImgCorrectAns(imgCorrectAns + 1);\n        } else {\n          console.log('Incorrect Answer!');\n          setImgInCorrectAns(imgInCorrectAns + 1);\n        }\n        break;\n      case 'textandimageURL':\n        setTextAndImageQuestionAttempted(selectedOption);\n        console.log(\"INside optionclick imageQuestionAttempted\", textAndImageQuestionAttempted);\n        if (selectedOption === quizData.correctOptionTxtImg) {\n          console.log('Correct Answer!');\n          setTextImgCorrectAns(textImgCorrectAns + 1);\n        } else {\n          console.log('Incorrect Answer!');\n          setTextImgInCorrectAns(textImgInCorrectAns + 1);\n        }\n        break;\n      default:\n        console.warn(`Unhandled displayType: ${displayType}`);\n        break;\n    }\n  };\n  const handleNext = () => {\n    debugger;\n    // Check if the user has selected an option for the current question\n    const currentQuestionAnswered = selectedOptions[currentIndex];\n    switch (displayType) {\n      case 'text':\n        setTextQuestionAttempted(currentQuestionAnswered);\n        console.log(\"textQuestionAttempted\", textQuestionAttempted);\n        break;\n      case 'imageURL':\n        setImageQuestionAttempted(currentQuestionAnswered);\n        console.log(\"imageQuestionAttempted\", imageQuestionAttempted);\n        break;\n      case 'textandimageURL':\n        setTextAndImageQuestionAttempted(currentQuestionAnswered);\n        console.log(\"textAndImageQuestionAttempted\", textAndImageQuestionAttempted);\n        break;\n      default:\n        break;\n    }\n    if (currentQuestionAnswered) {\n      // If the question is answered, increment the totalAttemptedQuestions count\n      setTotalAttemptedQuestions(totalAttemptedQuestions + 1);\n      console.log(\"totalAttemptedQuestions\", totalAttemptedQuestions);\n      console.log(\"selectedOptions\", selectedOptions);\n      // Check if the selected option is correct\n      const isCorrect = currentQuestionAnswered === quizData[`correctOption${displayType.charAt(0).toUpperCase()}${displayType.slice(1)}`];\n    }\n    setCurrentIndex(prevIndex => {\n      const nextIndex = (prevIndex + 1) % displayTypes.length;\n      setDisplayType(displayTypes[nextIndex]);\n\n      // // Check if all cases are over\n      if (nextIndex === 0) {\n        // Show the final total of textCorrectAns, imgCorrectAns, and textImgCorrectAns\n        const finalTotal = textCorrectAns + imgCorrectAns + textImgCorrectAns;\n        console.log(\"Final Total:\", finalTotal);\n        setShowFinalTotal(finalTotal);\n        alert(\"Quiz questions are over!\");\n        // Optionally, you can redirect or perform any other action after showing the alert\n\n        // Prepare data for API post\n        const finalAnsweredQuestion = {\n          textQuestionAttempted,\n          imageQuestionAttempted,\n          textAndImageQuestionAttempted,\n          textCorrectAns,\n          textInCorrectAns,\n          imgCorrectAns,\n          imgInCorrectAns,\n          textImgCorrectAns,\n          textImgInCorrectAns\n        };\n        console.log(\"finalAnsweredQuestion\", finalAnsweredQuestion);\n\n        // Call function to post data to API\n        postFinalAnsweredQuestions(finalAnsweredQuestion);\n\n        // Navigate to QuizFinal component with finalTotal as a URL parameter\n\n        navigate('/quiz-final');\n      }\n      return nextIndex;\n    });\n    setSelectedOption(null);\n  };\n  const postFinalAnsweredQuestions = async finalAnsweredQuestion => {\n    try {\n      debugger;\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/create/quiz/${id}`, finalAnsweredQuestion);\n      console.log('API Response==========:', response.data);\n      // Handle success, e.g., show a success message\n    } catch (error) {\n      console.error('Error posting final answered questions:', error);\n      // Handle error, e.g., show an error message\n    }\n  };\n  const renderContentByType = () => {\n    if (quizData.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 14\n      }, this);\n    }\n    switch (displayType) {\n      case 'text':\n        // Check if quizData.questionText is not empty\n        if (!quizData.questionText) {\n          return null;\n        }\n        return (\n          /*#__PURE__*/\n          // Render text content\n          _jsxDEV(_Fragment, {\n            children: [quizData.questionText && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.childthree,\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: quizData.questionText\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 15\n            }, this), quizData.optionsText && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.childtwo,\n              children: quizData.optionsText.map((optionsText, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.subChild,\n                onClick: () => handleOptionClick(optionsText),\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: optionsText\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 349,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 348,\n                  columnNumber: 21\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 15\n            }, this), quizData.typeText && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.childthree,\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Type: \", quizData.typeText]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true)\n        );\n      case 'imageURL':\n        // Check if quizData.questionText is not empty\n        if (!quizData.questionImg) {\n          return null;\n        }\n        return (\n          /*#__PURE__*/\n          // Render image content\n          _jsxDEV(_Fragment, {\n            children: [quizData.questionImg && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.childthree,\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: quizData.questionImg\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 15\n            }, this), quizData.optionsImg && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.childtwo,\n              children: quizData.optionsImg.map((optionsImg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.subChild,\n                onClick: () => handleOptionClick(optionsImg),\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: optionsImg,\n                  alt: index + 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 21\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 15\n            }, this), quizData.typeImg && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.childthree,\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Type: \", quizData.typeImg]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true)\n        );\n      case 'textandimageURL':\n        // Check if quizData.questionText is not empty\n        if (!quizData.questionTxtImg) {\n          return null;\n        }\n        return (\n          /*#__PURE__*/\n          // Render text and image content\n          _jsxDEV(_Fragment, {\n            children: [quizData.questionTxtImg && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.childthree,\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: quizData.questionTxtImg\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 15\n            }, this), quizData.optionsTxtImg && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.childtwoTxtImg,\n              children: quizData.optionsTxtImg.map((optionsTxtImg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.subChildTxtImg,\n                onClick: () => handleOptionClick(optionsTxtImg),\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: optionsTxtImg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 413,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 412,\n                  columnNumber: 21\n                }, this), quizData.optionsImageTxtImg && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.childtwoImgstyle,\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: quizData.optionsImageTxtImg[index],\n                    alt: `Option ${index + 1}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 417,\n                    columnNumber: 25\n                  }, this)\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 416,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 15\n            }, this), quizData.typeTxtImg && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.childthree,\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Type: \", quizData.typeTxtImg]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true)\n        );\n      default:\n        return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.parent,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.childone,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"01/\", quizData.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: timer > 0 ? `00:${timer}s` : \"Time's up!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 7\n      }, this), renderContentByType(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.childfour,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.buttonNext,\n          onClick: handleNext,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_s(QuizText, \"SsJVNzH5mOYshj0onz4lYOiNwvg=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = QuizText;\nexport default QuizText;\nvar _c;\n$RefreshReg$(_c, \"QuizText\");","map":{"version":3,"names":["React","useState","useEffect","axios","styles","useParams","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizText","_s","quizData","setQuizData","currentIndex","setCurrentIndex","timer","setTimer","displayType","setDisplayType","error","setError","id","loading","setLoading","displayTypes","setDisplayTypes","selectedOption","setSelectedOption","selectedOptions","setSelectedOptions","answeredQuestions","setAnsweredQuestions","totalAttemptedQuestions","setTotalAttemptedQuestions","attemptedQuestions","setAttemptedQuestions","navigate","showFinalTotal","setShowFinalTotal","textQuestionAttempted","setTextQuestionAttempted","imageQuestionAttempted","setImageQuestionAttempted","textAndImageQuestionAttempted","setTextAndImageQuestionAttempted","textCorrectAns","setTextCorrectAns","textInCorrectAns","setTextInCorrectAns","imgCorrectAns","setImgCorrectAns","imgInCorrectAns","setImgInCorrectAns","textImgCorrectAns","setTextImgCorrectAns","textImgInCorrectAns","setTextImgInCorrectAns","console","log","fetchQuizData","response","get","process","env","REACT_APP_API_URL","data","Array","length","fill","intervalId","timeText","setInterval","prevTimer","clearInterval","handleOptionClick","updatedOptions","includes","correctOptionText","correctOptionImg","correctOptionTxtImg","warn","handleNext","currentQuestionAnswered","isCorrect","charAt","toUpperCase","slice","prevIndex","nextIndex","finalTotal","alert","finalAnsweredQuestion","postFinalAnsweredQuestions","post","renderContentByType","children","fileName","_jsxFileName","lineNumber","columnNumber","questionText","className","childthree","optionsText","childtwo","map","index","subChild","onClick","typeText","questionImg","optionsImg","src","alt","typeImg","questionTxtImg","optionsTxtImg","childtwoTxtImg","subChildTxtImg","optionsImageTxtImg","childtwoImgstyle","typeTxtImg","parent","childone","childfour","buttonNext","_c","$RefreshReg$"],"sources":["E:/cuvette-quizz-app/cuvette-frontend-quiz-app/src/QuizInterface/QuizeQandAns/QuizQandAnsText/QuizText.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport styles from '../QuizQandAnsText/Style.module.css';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst QuizText = () => {\r\n  const [quizData, setQuizData] = useState([]);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [timer, setTimer] = useState(0);\r\n  const [displayType, setDisplayType] = useState('text');\r\n  const [error, setError] = useState('')\r\n  const { id } = useParams();\r\n  const [loading, setLoading] = useState(true);\r\n  const [displayTypes, setDisplayTypes] = useState(['text', 'imageURL', 'textandimageURL']);\r\n\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  // const [correctCount, setCorrectCount] = useState(0);\r\n  // const [incorrectCount, setIncorrectCount] = useState(0);\r\n\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [answeredQuestions, setAnsweredQuestions] = useState([]);\r\n  const [totalAttemptedQuestions, setTotalAttemptedQuestions] = useState(0);\r\n\r\n  const [attemptedQuestions, setAttemptedQuestions] = useState([]);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [showFinalTotal, setShowFinalTotal] = useState(0);\r\n\r\n  // Total questions attempted\r\n  const [textQuestionAttempted, setTextQuestionAttempted] = useState('');\r\n  const [imageQuestionAttempted, setImageQuestionAttempted] = useState('');\r\n  const [textAndImageQuestionAttempted, setTextAndImageQuestionAttempted] = useState('');\r\n\r\n\r\n  // Text quiz correct and Incorrect Question\r\n  const [textCorrectAns, setTextCorrectAns] = useState(0);\r\n  const [textInCorrectAns, setTextInCorrectAns] = useState(0);\r\n\r\n  // Img quiz correct and Incorrect Question\r\n  const [imgCorrectAns, setImgCorrectAns] = useState(0);\r\n  const [imgInCorrectAns, setImgInCorrectAns] = useState(0);\r\n\r\n  // TextandImg quiz correct and Incorrect Question\r\n  const [textImgCorrectAns, setTextImgCorrectAns] = useState(0);\r\n  const [textImgInCorrectAns, setTextImgInCorrectAns] = useState(0);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    console.log(\"TEXTCorrectCount\", textCorrectAns);\r\n    console.log(\"TEXTInCorrectCount\", textInCorrectAns);\r\n\r\n    console.log(\"IMGCorrectCount\", imgCorrectAns);\r\n    console.log(\"IMGInCorrectCount\", imgInCorrectAns);\r\n\r\n    console.log(\"TEXTIMGCorrectCount\", textImgCorrectAns);\r\n    console.log(\"TEXTIMGInCorrectCount\", textImgInCorrectAns);\r\n\r\n  }, [textQuestionAttempted, imageQuestionAttempted, imageQuestionAttempted, textCorrectAns, textInCorrectAns, imgCorrectAns, imgInCorrectAns, textImgCorrectAns, textImgInCorrectAns, showFinalTotal]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchQuizData = async () => {\r\n      try {\r\n        debugger\r\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/create/quiz/${id}`);\r\n        console.log('API Response:', response.data);\r\n        setQuizData(response.data);\r\n        setLoading(false);\r\n        setSelectedOptions(new Array(response.data.length).fill(false));\r\n        setAnsweredQuestions([]);\r\n        setTotalAttemptedQuestions(0);\r\n\r\n\r\n      } catch (error) {\r\n        console.error('Error fetching quiz data:', error);\r\n        setError('Error fetching quiz data');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchQuizData();\r\n\r\n  }, [id]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    let intervalId;\r\n\r\n    // Start the timer when the component mounts\r\n    if (quizData.timeText > 0) {\r\n      debugger\r\n      setTimer(quizData.timeText);\r\n\r\n      intervalId = setInterval(() => {\r\n        debugger\r\n        setTimer(prevTimer => prevTimer - 1);\r\n      }, 1000);\r\n    }\r\n\r\n    // Clear the interval when the component unmounts\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [quizData]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    // Handle logic when the timer reaches 0\r\n    if (timer === 0) {\r\n      debugger\r\n      // Implement your logic when time's up\r\n      console.log(\"Time's up!\");\r\n      // You might want to disable the Next button or do something else here\r\n    }\r\n  }, [timer]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleOptionClick = (selectedOption) => {\r\n    debugger\r\n\r\n    const updatedOptions = [...selectedOptions];\r\n    updatedOptions[currentIndex] = selectedOption;\r\n    setSelectedOptions(updatedOptions);\r\n\r\n    // Add the current question to the list of answered questions\r\n    if (!answeredQuestions.includes(currentIndex)) {\r\n      setAnsweredQuestions([...answeredQuestions, currentIndex]);\r\n      setTotalAttemptedQuestions(totalAttemptedQuestions + 1);\r\n    }\r\n\r\n    switch (displayType) {\r\n\r\n      case 'text':\r\n        setTextQuestionAttempted(selectedOption);\r\n        console.log(\"INside optionclick textQuestionAttempted\", textQuestionAttempted);\r\n\r\n\r\n        if (selectedOption === quizData.correctOptionText) {\r\n          console.log('Correct Answer!');\r\n          setTextCorrectAns(textCorrectAns + 1)\r\n        } else {\r\n          console.log('Incorrect Answer!');\r\n          setTextInCorrectAns(textInCorrectAns + 1)\r\n        }\r\n        break;\r\n\r\n      case 'imageURL':\r\n        setImageQuestionAttempted(selectedOption);\r\n        console.log(\"INside optionclick imageQuestionAttempted\", imageQuestionAttempted);\r\n\r\n        if (selectedOption === quizData.correctOptionImg) {\r\n          console.log('Correct Answer!');\r\n          setImgCorrectAns(imgCorrectAns + 1);\r\n        } else {\r\n          console.log('Incorrect Answer!');\r\n          setImgInCorrectAns(imgInCorrectAns + 1);\r\n        }\r\n        break;\r\n\r\n      case 'textandimageURL':\r\n\r\n        setTextAndImageQuestionAttempted(selectedOption);\r\n        console.log(\"INside optionclick imageQuestionAttempted\", textAndImageQuestionAttempted);\r\n\r\n        if (selectedOption === quizData.correctOptionTxtImg) {\r\n          console.log('Correct Answer!');\r\n          setTextImgCorrectAns(textImgCorrectAns + 1);\r\n        } else {\r\n          console.log('Incorrect Answer!');\r\n          setTextImgInCorrectAns(textImgInCorrectAns + 1);\r\n        }\r\n        break;\r\n      default:\r\n        console.warn(`Unhandled displayType: ${displayType}`);\r\n        break;\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleNext = () => {\r\n    debugger\r\n    // Check if the user has selected an option for the current question\r\n    const currentQuestionAnswered = selectedOptions[currentIndex];\r\n\r\n    switch (displayType) {\r\n      case 'text':\r\n        setTextQuestionAttempted(currentQuestionAnswered);\r\n        console.log(\"textQuestionAttempted\", textQuestionAttempted);\r\n\r\n        break;\r\n      case 'imageURL':\r\n        setImageQuestionAttempted(currentQuestionAnswered);\r\n        console.log(\"imageQuestionAttempted\", imageQuestionAttempted);\r\n        break;\r\n      case 'textandimageURL':\r\n        setTextAndImageQuestionAttempted(currentQuestionAnswered);\r\n        console.log(\"textAndImageQuestionAttempted\", textAndImageQuestionAttempted);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    if (currentQuestionAnswered) {\r\n      // If the question is answered, increment the totalAttemptedQuestions count\r\n      setTotalAttemptedQuestions(totalAttemptedQuestions + 1);\r\n      console.log(\"totalAttemptedQuestions\", totalAttemptedQuestions)\r\n      console.log(\"selectedOptions\", selectedOptions)\r\n      // Check if the selected option is correct\r\n      const isCorrect =\r\n        currentQuestionAnswered ===\r\n        quizData[\r\n        `correctOption${displayType.charAt(0).toUpperCase()}${displayType.slice(1)}`\r\n        ];\r\n    }\r\n\r\n\r\n\r\n    setCurrentIndex((prevIndex) => {\r\n      const nextIndex = (prevIndex + 1) % displayTypes.length;\r\n      setDisplayType(displayTypes[nextIndex]);\r\n\r\n      // // Check if all cases are over\r\n      if (nextIndex === 0) {\r\n\r\n        // Show the final total of textCorrectAns, imgCorrectAns, and textImgCorrectAns\r\n        const finalTotal = textCorrectAns + imgCorrectAns + textImgCorrectAns;\r\n        console.log(\"Final Total:\", finalTotal);\r\n\r\n\r\n\r\n        setShowFinalTotal(finalTotal);\r\n        alert(\"Quiz questions are over!\");\r\n        // Optionally, you can redirect or perform any other action after showing the alert\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // Prepare data for API post\r\n        const finalAnsweredQuestion = {\r\n          textQuestionAttempted,\r\n          imageQuestionAttempted,\r\n          textAndImageQuestionAttempted,\r\n          textCorrectAns,\r\n          textInCorrectAns,\r\n          imgCorrectAns,\r\n          imgInCorrectAns,\r\n          textImgCorrectAns,\r\n          textImgInCorrectAns,\r\n        };\r\n\r\n        console.log(\"finalAnsweredQuestion\", finalAnsweredQuestion)\r\n\r\n        // Call function to post data to API\r\n        postFinalAnsweredQuestions(finalAnsweredQuestion);\r\n\r\n        // Navigate to QuizFinal component with finalTotal as a URL parameter\r\n\r\n        navigate('/quiz-final');\r\n      }\r\n\r\n      return nextIndex;\r\n    });\r\n    setSelectedOption(null);\r\n\r\n\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  const postFinalAnsweredQuestions = async (finalAnsweredQuestion) => {\r\n    try {\r\n      debugger\r\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/create/quiz/${id}`, finalAnsweredQuestion);\r\n      console.log('API Response==========:', response.data);\r\n      // Handle success, e.g., show a success message\r\n    } catch (error) {\r\n      console.error('Error posting final answered questions:', error);\r\n      // Handle error, e.g., show an error message\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const renderContentByType = () => {\r\n\r\n    if (quizData.length === 0) {\r\n      return <p>Loading...</p>;\r\n    }\r\n\r\n    switch (displayType) {\r\n      case 'text':\r\n        // Check if quizData.questionText is not empty\r\n        if (!quizData.questionText) {\r\n          return null;\r\n        }\r\n        return (\r\n          // Render text content\r\n          <>\r\n\r\n            {quizData.questionText && (\r\n              <div className={styles.childthree}>\r\n                <h2>{quizData.questionText}</h2>\r\n              </div>\r\n            )}\r\n            {quizData.optionsText && (\r\n              <div className={styles.childtwo}>\r\n                {quizData.optionsText.map((optionsText, index) => (\r\n                  <div key={index} className={styles.subChild} onClick={() => handleOptionClick(optionsText)}>\r\n                    <div>\r\n                      <p>{optionsText}</p>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n            {quizData.typeText && (\r\n              <div className={styles.childthree}>\r\n                <p>Type: {quizData.typeText}</p>\r\n              </div>\r\n            )}\r\n          </>\r\n        );\r\n      case 'imageURL':\r\n        // Check if quizData.questionText is not empty\r\n        if (!quizData.questionImg) {\r\n          return null;\r\n        }\r\n\r\n        return (\r\n          // Render image content\r\n          <>\r\n            {quizData.questionImg && (\r\n              <div className={styles.childthree}>\r\n                <h2>{quizData.questionImg}</h2>\r\n              </div>\r\n            )}\r\n            {quizData.optionsImg && (\r\n              <div className={styles.childtwo}>\r\n                {quizData.optionsImg.map((optionsImg, index) => (\r\n                  <div key={index} className={styles.subChild} onClick={() => handleOptionClick(optionsImg)}>\r\n                    {/* <div> */}\r\n                    <img src={optionsImg} alt={index + 1} />\r\n                    {/* </div> */}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n            {quizData.typeImg && (\r\n              <div className={styles.childthree}>\r\n                <p>Type: {quizData.typeImg}</p>\r\n              </div>\r\n            )}\r\n          </>\r\n        );\r\n      case 'textandimageURL':\r\n        // Check if quizData.questionText is not empty\r\n        if (!quizData.questionTxtImg) {\r\n          return null;\r\n        }\r\n        return (\r\n          // Render text and image content\r\n          <>\r\n\r\n            {quizData.questionTxtImg && (\r\n              <div className={styles.childthree}>\r\n                <h2>{quizData.questionTxtImg}</h2>\r\n              </div>\r\n            )}\r\n            {quizData.optionsTxtImg && (\r\n              <div className={styles.childtwoTxtImg}>\r\n                {quizData.optionsTxtImg.map((optionsTxtImg, index) => (\r\n                  <div key={index} className={styles.subChildTxtImg} onClick={() => handleOptionClick(optionsTxtImg)}>\r\n                    <div>\r\n                      <p>{optionsTxtImg}</p>\r\n                    </div>\r\n                    {quizData.optionsImageTxtImg && (\r\n                      <div key={index} className={styles.childtwoImgstyle}>\r\n                        <img src={quizData.optionsImageTxtImg[index]} alt={`Option ${index + 1}`} />\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n            {quizData.typeTxtImg && (\r\n              <div className={styles.childthree}>\r\n                <p>Type: {quizData.typeTxtImg}</p>\r\n              </div>\r\n            )}\r\n          </>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return <>\r\n    <div className={styles.parent}>\r\n      <div className={styles.childone}>\r\n        <h3>01/{quizData.length}</h3>\r\n        <h2>{timer > 0 ? `00:${timer}s` : \"Time's up!\"}</h2>\r\n      </div>\r\n      {renderContentByType()}\r\n\r\n      <div className={styles.childfour}>\r\n        <button className={styles.buttonNext} onClick={handleNext}>\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </>;\r\n};\r\n\r\nexport default QuizText;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}