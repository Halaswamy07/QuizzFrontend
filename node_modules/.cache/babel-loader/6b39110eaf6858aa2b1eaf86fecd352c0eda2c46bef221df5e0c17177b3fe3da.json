{"ast":null,"code":"import React,{useState,useEffect}from'react';import axios from'axios';import styles from'../QuizQandAnsText/Style.module.css';import{useParams}from'react-router-dom';import{useNavigate}from'react-router-dom';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const QuizText=()=>{const[quizData,setQuizData]=useState([]);const[currentIndex,setCurrentIndex]=useState(0);const[timer,setTimer]=useState(0);const[displayType,setDisplayType]=useState('text');const[error,setError]=useState('');const{id}=useParams();const[loading,setLoading]=useState(true);const[displayTypes,setDisplayTypes]=useState(['text','imageURL','textandimageURL']);const[selectedOption,setSelectedOption]=useState(null);// const [correctCount, setCorrectCount] = useState(0);\n// const [incorrectCount, setIncorrectCount] = useState(0);\nconst[selectedOptions,setSelectedOptions]=useState([]);const[answeredQuestions,setAnsweredQuestions]=useState([]);const[totalAttemptedQuestions,setTotalAttemptedQuestions]=useState(0);const[attemptedQuestions,setAttemptedQuestions]=useState([]);const navigate=useNavigate();const[showFinalTotal,setShowFinalTotal]=useState(0);// Total questions attempted\nconst[textQuestionAttempted,setTextQuestionAttempted]=useState('');const[imageQuestionAttempted,setImageQuestionAttempted]=useState('');const[textAndImageQuestionAttempted,setTextAndImageQuestionAttempted]=useState('');// Text quiz correct and Incorrect Question\nconst[textCorrectAns,setTextCorrectAns]=useState(0);const[textInCorrectAns,setTextInCorrectAns]=useState(0);// Img quiz correct and Incorrect Question\nconst[imgCorrectAns,setImgCorrectAns]=useState(0);const[imgInCorrectAns,setImgInCorrectAns]=useState(0);// TextandImg quiz correct and Incorrect Question\nconst[textImgCorrectAns,setTextImgCorrectAns]=useState(0);const[textImgInCorrectAns,setTextImgInCorrectAns]=useState(0);useEffect(()=>{console.log(\"TEXTCorrectCount\",textCorrectAns);console.log(\"TEXTInCorrectCount\",textInCorrectAns);console.log(\"IMGCorrectCount\",imgCorrectAns);console.log(\"IMGInCorrectCount\",imgInCorrectAns);console.log(\"TEXTIMGCorrectCount\",textImgCorrectAns);console.log(\"TEXTIMGInCorrectCount\",textImgInCorrectAns);},[textQuestionAttempted,imageQuestionAttempted,imageQuestionAttempted,textCorrectAns,textInCorrectAns,imgCorrectAns,imgInCorrectAns,textImgCorrectAns,textImgInCorrectAns,showFinalTotal]);useEffect(()=>{const fetchQuizData=async()=>{try{debugger;const response=await axios.get(`http://localhost:4747/api/create/quiz/${id}`);console.log('API Response:',response.data);setQuizData(response.data);setLoading(false);setSelectedOptions(new Array(response.data.length).fill(false));setAnsweredQuestions([]);setTotalAttemptedQuestions(0);}catch(error){console.error('Error fetching quiz data:',error);setError('Error fetching quiz data');setLoading(false);}};fetchQuizData();},[id]);useEffect(()=>{let intervalId;// Start the timer when the component mounts\nif(quizData.timeText>0){debugger;setTimer(quizData.timeText);intervalId=setInterval(()=>{debugger;setTimer(prevTimer=>prevTimer-1);},1000);}// Clear the interval when the component unmounts\nreturn()=>{clearInterval(intervalId);};},[quizData]);useEffect(()=>{// Handle logic when the timer reaches 0\nif(timer===0){debugger;// Implement your logic when time's up\nconsole.log(\"Time's up!\");// You might want to disable the Next button or do something else here\n}},[timer]);const handleOptionClick=selectedOption=>{debugger;const updatedOptions=[...selectedOptions];updatedOptions[currentIndex]=selectedOption;setSelectedOptions(updatedOptions);// Add the current question to the list of answered questions\nif(!answeredQuestions.includes(currentIndex)){setAnsweredQuestions([...answeredQuestions,currentIndex]);setTotalAttemptedQuestions(totalAttemptedQuestions+1);}switch(displayType){case'text':setTextQuestionAttempted(selectedOption);console.log(\"INside optionclick textQuestionAttempted\",textQuestionAttempted);if(selectedOption===quizData.correctOptionText){console.log('Correct Answer!');setTextCorrectAns(textCorrectAns+1);}else{console.log('Incorrect Answer!');setTextInCorrectAns(textInCorrectAns+1);}break;case'imageURL':setImageQuestionAttempted(selectedOption);console.log(\"INside optionclick imageQuestionAttempted\",imageQuestionAttempted);if(selectedOption===quizData.correctOptionImg){console.log('Correct Answer!');setImgCorrectAns(imgCorrectAns+1);}else{console.log('Incorrect Answer!');setImgInCorrectAns(imgInCorrectAns+1);}break;case'textandimageURL':setTextAndImageQuestionAttempted(selectedOption);console.log(\"INside optionclick imageQuestionAttempted\",textAndImageQuestionAttempted);if(selectedOption===quizData.correctOptionTxtImg){console.log('Correct Answer!');setTextImgCorrectAns(textImgCorrectAns+1);}else{console.log('Incorrect Answer!');setTextImgInCorrectAns(textImgInCorrectAns+1);}break;default:console.warn(`Unhandled displayType: ${displayType}`);break;}};const handleNext=()=>{debugger;// Check if the user has selected an option for the current question\nconst currentQuestionAnswered=selectedOptions[currentIndex];switch(displayType){case'text':setTextQuestionAttempted(currentQuestionAnswered);console.log(\"textQuestionAttempted\",textQuestionAttempted);break;case'imageURL':setImageQuestionAttempted(currentQuestionAnswered);console.log(\"imageQuestionAttempted\",imageQuestionAttempted);break;case'textandimageURL':setTextAndImageQuestionAttempted(currentQuestionAnswered);console.log(\"textAndImageQuestionAttempted\",textAndImageQuestionAttempted);break;default:break;}if(currentQuestionAnswered){// If the question is answered, increment the totalAttemptedQuestions count\nsetTotalAttemptedQuestions(totalAttemptedQuestions+1);console.log(\"totalAttemptedQuestions\",totalAttemptedQuestions);console.log(\"selectedOptions\",selectedOptions);// Check if the selected option is correct\nconst isCorrect=currentQuestionAnswered===quizData[`correctOption${displayType.charAt(0).toUpperCase()}${displayType.slice(1)}`];}setCurrentIndex(prevIndex=>{const nextIndex=(prevIndex+1)%displayTypes.length;setDisplayType(displayTypes[nextIndex]);// // Check if all cases are over\nif(nextIndex===0){// Show the final total of textCorrectAns, imgCorrectAns, and textImgCorrectAns\nconst finalTotal=textCorrectAns+imgCorrectAns+textImgCorrectAns;console.log(\"Final Total:\",finalTotal);setShowFinalTotal(finalTotal);alert(\"Quiz questions are over!\");// Optionally, you can redirect or perform any other action after showing the alert\n// Prepare data for API post\nconst finalAnsweredQuestion={textQuestionAttempted,imageQuestionAttempted,textAndImageQuestionAttempted,textCorrectAns,textInCorrectAns,imgCorrectAns,imgInCorrectAns,textImgCorrectAns,textImgInCorrectAns};console.log(\"finalAnsweredQuestion\",finalAnsweredQuestion);// Call function to post data to API\npostFinalAnsweredQuestions(finalAnsweredQuestion);// Navigate to QuizFinal component with finalTotal as a URL parameter\nnavigate('/quiz-final');}return nextIndex;});setSelectedOption(null);};const postFinalAnsweredQuestions=async finalAnsweredQuestion=>{try{debugger;const response=await axios.post(`http://localhost:4747/api/create/quiz/${id}`,finalAnsweredQuestion);console.log('API Response==========:',response.data);// Handle success, e.g., show a success message\n}catch(error){console.error('Error posting final answered questions:',error);// Handle error, e.g., show an error message\n}};const renderContentByType=()=>{if(quizData.length===0){return/*#__PURE__*/_jsx(\"p\",{children:\"Loading...\"});}switch(displayType){case'text':// Check if quizData.questionText is not empty\nif(!quizData.questionText){return null;}return/*#__PURE__*/(// Render text content\n_jsxs(_Fragment,{children:[quizData.questionText&&/*#__PURE__*/_jsx(\"div\",{className:styles.childthree,children:/*#__PURE__*/_jsx(\"h2\",{children:quizData.questionText})}),quizData.optionsText&&/*#__PURE__*/_jsx(\"div\",{className:styles.childtwo,children:quizData.optionsText.map((optionsText,index)=>/*#__PURE__*/_jsx(\"div\",{className:styles.subChild,onClick:()=>handleOptionClick(optionsText),children:/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"p\",{children:optionsText})})},index))}),quizData.typeText&&/*#__PURE__*/_jsx(\"div\",{className:styles.childthree,children:/*#__PURE__*/_jsxs(\"p\",{children:[\"Type: \",quizData.typeText]})})]}));case'imageURL':// Check if quizData.questionText is not empty\nif(!quizData.questionImg){return null;}return/*#__PURE__*/(// Render image content\n_jsxs(_Fragment,{children:[quizData.questionImg&&/*#__PURE__*/_jsx(\"div\",{className:styles.childthree,children:/*#__PURE__*/_jsx(\"h2\",{children:quizData.questionImg})}),quizData.optionsImg&&/*#__PURE__*/_jsx(\"div\",{className:styles.childtwo,children:quizData.optionsImg.map((optionsImg,index)=>/*#__PURE__*/_jsx(\"div\",{className:styles.subChild,onClick:()=>handleOptionClick(optionsImg),children:/*#__PURE__*/_jsx(\"img\",{src:optionsImg,alt:index+1})},index))}),quizData.typeImg&&/*#__PURE__*/_jsx(\"div\",{className:styles.childthree,children:/*#__PURE__*/_jsxs(\"p\",{children:[\"Type: \",quizData.typeImg]})})]}));case'textandimageURL':// Check if quizData.questionText is not empty\nif(!quizData.questionTxtImg){return null;}return/*#__PURE__*/(// Render text and image content\n_jsxs(_Fragment,{children:[quizData.questionTxtImg&&/*#__PURE__*/_jsx(\"div\",{className:styles.childthree,children:/*#__PURE__*/_jsx(\"h2\",{children:quizData.questionTxtImg})}),quizData.optionsTxtImg&&/*#__PURE__*/_jsx(\"div\",{className:styles.childtwoTxtImg,children:quizData.optionsTxtImg.map((optionsTxtImg,index)=>/*#__PURE__*/_jsxs(\"div\",{className:styles.subChildTxtImg,onClick:()=>handleOptionClick(optionsTxtImg),children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"p\",{children:optionsTxtImg})}),quizData.optionsImageTxtImg&&/*#__PURE__*/_jsx(\"div\",{className:styles.childtwoImgstyle,children:/*#__PURE__*/_jsx(\"img\",{src:quizData.optionsImageTxtImg[index],alt:`Option ${index+1}`})},index)]},index))}),quizData.typeTxtImg&&/*#__PURE__*/_jsx(\"div\",{className:styles.childthree,children:/*#__PURE__*/_jsxs(\"p\",{children:[\"Type: \",quizData.typeTxtImg]})})]}));default:return null;}};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:styles.parent,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.childone,children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"01/\",quizData.length]}),/*#__PURE__*/_jsx(\"h2\",{children:timer>0?`00:${timer}s`:\"Time's up!\"})]}),renderContentByType(),/*#__PURE__*/_jsx(\"div\",{className:styles.childfour,children:/*#__PURE__*/_jsx(\"button\",{className:styles.buttonNext,onClick:handleNext,children:\"Next\"})})]})});};export default QuizText;","map":{"version":3,"names":["React","useState","useEffect","axios","styles","useParams","useNavigate","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","QuizText","quizData","setQuizData","currentIndex","setCurrentIndex","timer","setTimer","displayType","setDisplayType","error","setError","id","loading","setLoading","displayTypes","setDisplayTypes","selectedOption","setSelectedOption","selectedOptions","setSelectedOptions","answeredQuestions","setAnsweredQuestions","totalAttemptedQuestions","setTotalAttemptedQuestions","attemptedQuestions","setAttemptedQuestions","navigate","showFinalTotal","setShowFinalTotal","textQuestionAttempted","setTextQuestionAttempted","imageQuestionAttempted","setImageQuestionAttempted","textAndImageQuestionAttempted","setTextAndImageQuestionAttempted","textCorrectAns","setTextCorrectAns","textInCorrectAns","setTextInCorrectAns","imgCorrectAns","setImgCorrectAns","imgInCorrectAns","setImgInCorrectAns","textImgCorrectAns","setTextImgCorrectAns","textImgInCorrectAns","setTextImgInCorrectAns","console","log","fetchQuizData","response","get","data","Array","length","fill","intervalId","timeText","setInterval","prevTimer","clearInterval","handleOptionClick","updatedOptions","includes","correctOptionText","correctOptionImg","correctOptionTxtImg","warn","handleNext","currentQuestionAnswered","isCorrect","charAt","toUpperCase","slice","prevIndex","nextIndex","finalTotal","alert","finalAnsweredQuestion","postFinalAnsweredQuestions","post","renderContentByType","children","questionText","className","childthree","optionsText","childtwo","map","index","subChild","onClick","typeText","questionImg","optionsImg","src","alt","typeImg","questionTxtImg","optionsTxtImg","childtwoTxtImg","subChildTxtImg","optionsImageTxtImg","childtwoImgstyle","typeTxtImg","parent","childone","childfour","buttonNext"],"sources":["E:/cuvette-quizz-app/cuvette-frontend-quiz-app/src/QuizInterface/QuizeQandAns/QuizQandAnsText/QuizText.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport styles from '../QuizQandAnsText/Style.module.css';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst QuizText = () => {\r\n  const [quizData, setQuizData] = useState([]);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [timer, setTimer] = useState(0);\r\n  const [displayType, setDisplayType] = useState('text');\r\n  const [error, setError] = useState('')\r\n  const { id } = useParams();\r\n  const [loading, setLoading] = useState(true);\r\n  const [displayTypes, setDisplayTypes] = useState(['text', 'imageURL', 'textandimageURL']);\r\n\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  // const [correctCount, setCorrectCount] = useState(0);\r\n  // const [incorrectCount, setIncorrectCount] = useState(0);\r\n\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [answeredQuestions, setAnsweredQuestions] = useState([]);\r\n  const [totalAttemptedQuestions, setTotalAttemptedQuestions] = useState(0);\r\n\r\n  const [attemptedQuestions, setAttemptedQuestions] = useState([]);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [showFinalTotal, setShowFinalTotal] = useState(0);\r\n\r\n  // Total questions attempted\r\n  const [textQuestionAttempted, setTextQuestionAttempted] = useState('');\r\n  const [imageQuestionAttempted, setImageQuestionAttempted] = useState('');\r\n  const [textAndImageQuestionAttempted, setTextAndImageQuestionAttempted] = useState('');\r\n\r\n\r\n  // Text quiz correct and Incorrect Question\r\n  const [textCorrectAns, setTextCorrectAns] = useState(0);\r\n  const [textInCorrectAns, setTextInCorrectAns] = useState(0);\r\n\r\n  // Img quiz correct and Incorrect Question\r\n  const [imgCorrectAns, setImgCorrectAns] = useState(0);\r\n  const [imgInCorrectAns, setImgInCorrectAns] = useState(0);\r\n\r\n  // TextandImg quiz correct and Incorrect Question\r\n  const [textImgCorrectAns, setTextImgCorrectAns] = useState(0);\r\n  const [textImgInCorrectAns, setTextImgInCorrectAns] = useState(0);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    console.log(\"TEXTCorrectCount\", textCorrectAns);\r\n    console.log(\"TEXTInCorrectCount\", textInCorrectAns);\r\n\r\n    console.log(\"IMGCorrectCount\", imgCorrectAns);\r\n    console.log(\"IMGInCorrectCount\", imgInCorrectAns);\r\n\r\n    console.log(\"TEXTIMGCorrectCount\", textImgCorrectAns);\r\n    console.log(\"TEXTIMGInCorrectCount\", textImgInCorrectAns);\r\n\r\n  }, [textQuestionAttempted, imageQuestionAttempted, imageQuestionAttempted, textCorrectAns, textInCorrectAns, imgCorrectAns, imgInCorrectAns, textImgCorrectAns, textImgInCorrectAns, showFinalTotal]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchQuizData = async () => {\r\n      try {\r\n        debugger\r\n        const response = await axios.get(`http://localhost:4747/api/create/quiz/${id}`);\r\n        console.log('API Response:', response.data);\r\n        setQuizData(response.data);\r\n        setLoading(false);\r\n        setSelectedOptions(new Array(response.data.length).fill(false));\r\n        setAnsweredQuestions([]);\r\n        setTotalAttemptedQuestions(0);\r\n\r\n\r\n      } catch (error) {\r\n        console.error('Error fetching quiz data:', error);\r\n        setError('Error fetching quiz data');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchQuizData();\r\n\r\n  }, [id]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    let intervalId;\r\n\r\n    // Start the timer when the component mounts\r\n    if (quizData.timeText > 0) {\r\n      debugger\r\n      setTimer(quizData.timeText);\r\n\r\n      intervalId = setInterval(() => {\r\n        debugger\r\n        setTimer(prevTimer => prevTimer - 1);\r\n      }, 1000);\r\n    }\r\n\r\n    // Clear the interval when the component unmounts\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [quizData]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    // Handle logic when the timer reaches 0\r\n    if (timer === 0) {\r\n      debugger\r\n      // Implement your logic when time's up\r\n      console.log(\"Time's up!\");\r\n      // You might want to disable the Next button or do something else here\r\n    }\r\n  }, [timer]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleOptionClick = (selectedOption) => {\r\n    debugger\r\n\r\n    const updatedOptions = [...selectedOptions];\r\n    updatedOptions[currentIndex] = selectedOption;\r\n    setSelectedOptions(updatedOptions);\r\n\r\n    // Add the current question to the list of answered questions\r\n    if (!answeredQuestions.includes(currentIndex)) {\r\n      setAnsweredQuestions([...answeredQuestions, currentIndex]);\r\n      setTotalAttemptedQuestions(totalAttemptedQuestions + 1);\r\n    }\r\n\r\n    switch (displayType) {\r\n\r\n      case 'text':\r\n        setTextQuestionAttempted(selectedOption);\r\n        console.log(\"INside optionclick textQuestionAttempted\", textQuestionAttempted);\r\n\r\n\r\n        if (selectedOption === quizData.correctOptionText) {\r\n          console.log('Correct Answer!');\r\n          setTextCorrectAns(textCorrectAns + 1)\r\n        } else {\r\n          console.log('Incorrect Answer!');\r\n          setTextInCorrectAns(textInCorrectAns + 1)\r\n        }\r\n        break;\r\n\r\n      case 'imageURL':\r\n        setImageQuestionAttempted(selectedOption);\r\n        console.log(\"INside optionclick imageQuestionAttempted\", imageQuestionAttempted);\r\n\r\n        if (selectedOption === quizData.correctOptionImg) {\r\n          console.log('Correct Answer!');\r\n          setImgCorrectAns(imgCorrectAns + 1);\r\n        } else {\r\n          console.log('Incorrect Answer!');\r\n          setImgInCorrectAns(imgInCorrectAns + 1);\r\n        }\r\n        break;\r\n\r\n      case 'textandimageURL':\r\n\r\n        setTextAndImageQuestionAttempted(selectedOption);\r\n        console.log(\"INside optionclick imageQuestionAttempted\", textAndImageQuestionAttempted);\r\n\r\n        if (selectedOption === quizData.correctOptionTxtImg) {\r\n          console.log('Correct Answer!');\r\n          setTextImgCorrectAns(textImgCorrectAns + 1);\r\n        } else {\r\n          console.log('Incorrect Answer!');\r\n          setTextImgInCorrectAns(textImgInCorrectAns + 1);\r\n        }\r\n        break;\r\n      default:\r\n        console.warn(`Unhandled displayType: ${displayType}`);\r\n        break;\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleNext = () => {\r\n    debugger\r\n    // Check if the user has selected an option for the current question\r\n    const currentQuestionAnswered = selectedOptions[currentIndex];\r\n\r\n    switch (displayType) {\r\n      case 'text':\r\n        setTextQuestionAttempted(currentQuestionAnswered);\r\n        console.log(\"textQuestionAttempted\", textQuestionAttempted);\r\n\r\n        break;\r\n      case 'imageURL':\r\n        setImageQuestionAttempted(currentQuestionAnswered);\r\n        console.log(\"imageQuestionAttempted\", imageQuestionAttempted);\r\n        break;\r\n      case 'textandimageURL':\r\n        setTextAndImageQuestionAttempted(currentQuestionAnswered);\r\n        console.log(\"textAndImageQuestionAttempted\", textAndImageQuestionAttempted);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    if (currentQuestionAnswered) {\r\n      // If the question is answered, increment the totalAttemptedQuestions count\r\n      setTotalAttemptedQuestions(totalAttemptedQuestions + 1);\r\n      console.log(\"totalAttemptedQuestions\", totalAttemptedQuestions)\r\n      console.log(\"selectedOptions\", selectedOptions)\r\n      // Check if the selected option is correct\r\n      const isCorrect =\r\n        currentQuestionAnswered ===\r\n        quizData[\r\n        `correctOption${displayType.charAt(0).toUpperCase()}${displayType.slice(1)}`\r\n        ];\r\n    }\r\n\r\n\r\n\r\n    setCurrentIndex((prevIndex) => {\r\n      const nextIndex = (prevIndex + 1) % displayTypes.length;\r\n      setDisplayType(displayTypes[nextIndex]);\r\n\r\n      // // Check if all cases are over\r\n      if (nextIndex === 0) {\r\n\r\n        // Show the final total of textCorrectAns, imgCorrectAns, and textImgCorrectAns\r\n        const finalTotal = textCorrectAns + imgCorrectAns + textImgCorrectAns;\r\n        console.log(\"Final Total:\", finalTotal);\r\n\r\n\r\n\r\n        setShowFinalTotal(finalTotal);\r\n        alert(\"Quiz questions are over!\");\r\n        // Optionally, you can redirect or perform any other action after showing the alert\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // Prepare data for API post\r\n        const finalAnsweredQuestion = {\r\n          textQuestionAttempted,\r\n          imageQuestionAttempted,\r\n          textAndImageQuestionAttempted,\r\n          textCorrectAns,\r\n          textInCorrectAns,\r\n          imgCorrectAns,\r\n          imgInCorrectAns,\r\n          textImgCorrectAns,\r\n          textImgInCorrectAns,\r\n        };\r\n\r\n        console.log(\"finalAnsweredQuestion\", finalAnsweredQuestion)\r\n\r\n        // Call function to post data to API\r\n        postFinalAnsweredQuestions(finalAnsweredQuestion);\r\n\r\n        // Navigate to QuizFinal component with finalTotal as a URL parameter\r\n\r\n        navigate('/quiz-final');\r\n      }\r\n\r\n      return nextIndex;\r\n    });\r\n    setSelectedOption(null);\r\n\r\n\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  const postFinalAnsweredQuestions = async (finalAnsweredQuestion) => {\r\n    try {\r\n      debugger\r\n      const response = await axios.post(`http://localhost:4747/api/create/quiz/${id}`, finalAnsweredQuestion);\r\n      console.log('API Response==========:', response.data);\r\n      // Handle success, e.g., show a success message\r\n    } catch (error) {\r\n      console.error('Error posting final answered questions:', error);\r\n      // Handle error, e.g., show an error message\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const renderContentByType = () => {\r\n\r\n    if (quizData.length === 0) {\r\n      return <p>Loading...</p>;\r\n    }\r\n\r\n    switch (displayType) {\r\n      case 'text':\r\n        // Check if quizData.questionText is not empty\r\n        if (!quizData.questionText) {\r\n          return null;\r\n        }\r\n        return (\r\n          // Render text content\r\n          <>\r\n\r\n            {quizData.questionText && (\r\n              <div className={styles.childthree}>\r\n                <h2>{quizData.questionText}</h2>\r\n              </div>\r\n            )}\r\n            {quizData.optionsText && (\r\n              <div className={styles.childtwo}>\r\n                {quizData.optionsText.map((optionsText, index) => (\r\n                  <div key={index} className={styles.subChild} onClick={() => handleOptionClick(optionsText)}>\r\n                    <div>\r\n                      <p>{optionsText}</p>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n            {quizData.typeText && (\r\n              <div className={styles.childthree}>\r\n                <p>Type: {quizData.typeText}</p>\r\n              </div>\r\n            )}\r\n          </>\r\n        );\r\n      case 'imageURL':\r\n        // Check if quizData.questionText is not empty\r\n        if (!quizData.questionImg) {\r\n          return null;\r\n        }\r\n\r\n        return (\r\n          // Render image content\r\n          <>\r\n            {quizData.questionImg && (\r\n              <div className={styles.childthree}>\r\n                <h2>{quizData.questionImg}</h2>\r\n              </div>\r\n            )}\r\n            {quizData.optionsImg && (\r\n              <div className={styles.childtwo}>\r\n                {quizData.optionsImg.map((optionsImg, index) => (\r\n                  <div key={index} className={styles.subChild} onClick={() => handleOptionClick(optionsImg)}>\r\n                    {/* <div> */}\r\n                    <img src={optionsImg} alt={index + 1} />\r\n                    {/* </div> */}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n            {quizData.typeImg && (\r\n              <div className={styles.childthree}>\r\n                <p>Type: {quizData.typeImg}</p>\r\n              </div>\r\n            )}\r\n          </>\r\n        );\r\n      case 'textandimageURL':\r\n        // Check if quizData.questionText is not empty\r\n        if (!quizData.questionTxtImg) {\r\n          return null;\r\n        }\r\n        return (\r\n          // Render text and image content\r\n          <>\r\n\r\n            {quizData.questionTxtImg && (\r\n              <div className={styles.childthree}>\r\n                <h2>{quizData.questionTxtImg}</h2>\r\n              </div>\r\n            )}\r\n            {quizData.optionsTxtImg && (\r\n              <div className={styles.childtwoTxtImg}>\r\n                {quizData.optionsTxtImg.map((optionsTxtImg, index) => (\r\n                  <div key={index} className={styles.subChildTxtImg} onClick={() => handleOptionClick(optionsTxtImg)}>\r\n                    <div>\r\n                      <p>{optionsTxtImg}</p>\r\n                    </div>\r\n                    {quizData.optionsImageTxtImg && (\r\n                      <div key={index} className={styles.childtwoImgstyle}>\r\n                        <img src={quizData.optionsImageTxtImg[index]} alt={`Option ${index + 1}`} />\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n            {quizData.typeTxtImg && (\r\n              <div className={styles.childthree}>\r\n                <p>Type: {quizData.typeTxtImg}</p>\r\n              </div>\r\n            )}\r\n          </>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return <>\r\n    <div className={styles.parent}>\r\n      <div className={styles.childone}>\r\n        <h3>01/{quizData.length}</h3>\r\n        <h2>{timer > 0 ? `00:${timer}s` : \"Time's up!\"}</h2>\r\n      </div>\r\n      {renderContentByType()}\r\n\r\n      <div className={styles.childfour}>\r\n        <button className={styles.buttonNext} onClick={handleNext}>\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </>;\r\n};\r\n\r\nexport default QuizText;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}